name: Build
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # selecting a toolchain either by action or manual `rustup` calls should
      # happen before the cache plugin, as the cache uses the current rustc
      # version as its cache key
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install stable --profile minimal

      - name: Rust Cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          workspaces: |
            . -> target

      # Manages cargo installs with proper caching support
      - name: Install cargo-hack
        uses: taiki-e/install-action@f1390fd0d8205ae79e5e57b1d1e300dceeb4163e # v2
        with:
          # An arbitrary version SemVer constrained to prevent breaking CI as
          # time goes on. Feel free to bump.
          tool: cargo-hack@0.6

      - uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40 # v1.4.3
        name: Install CBC dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        with:
          packages: coinor-cbc coinor-libcbc-dev
          version: 1.0 # an arbitrary cache key

      - name: Install CBC dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cbc

      - name: Remove Cargo.lock
        # Because this is a library crate, it is best to not use a lockfile so
        # we are more quickly alerted to breaking changes if a dependency
        # violates semver.
        run: rm Cargo.lock

      # Fail fast
      - name: Check
        run: cargo hack check --feature-powerset --no-dev-deps

      # Catch link-time errors missed by check
      - name: Build
        run: cargo build --all-features

      # Proper exhaustive testing
      - name: Test
        # Test can't be run with --no-dev-deps
        run: cargo hack test --feature-powerset -- --test-threads=1

      # Run clippy treating warnings as errors
      - name: Clippy
        run: cargo hack clippy --feature-powerset --no-dev-deps -- -D warnings

      # Check formatting
      - name: Format
        run: cargo fmt --all --check
